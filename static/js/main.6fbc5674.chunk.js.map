{"version":3,"sources":["Components/Card.js","Components/CardsArray.js","Components/SearchBox.js","Components/Scroll.js","Components/ErrorBoundry.js","Containers/App.js","serviceWorker.js","index.js"],"names":["Card","id","name","email","className","alt","src","CardsArray","robots","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchField","target","value","fetch","then","response","json","users","filteredRobots","filter","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"oOAeeA,EAbF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,MAExB,OACO,yBAAKC,UAAU,uDACb,yBAAKC,IAAI,QAAQC,IAAG,+BAA0BL,EAA1B,mBACjB,6BACA,4BAAKC,GACL,2BAAIC,MCaFI,EAnBI,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACrB,OACC,6BAEUA,EAAOC,KAAI,SAACC,EAAMC,GACrB,OACO,kBAAC,EAAD,CACAC,IAAKD,EACLV,GAAIS,EAAKT,GACTC,KAAMQ,EAAKR,KACXC,MAAOO,EAAKP,aCEbU,EAbG,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACpB,OACC,yBAAKV,UAAU,OACT,2BACAA,UAAU,mCACVW,KAAK,SACLC,YAAY,gBACZC,SAAWH,MCCJI,EARA,SAACC,GACf,OACE,yBAAKC,MAAO,CAAEC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UACrEJ,EAAMK,WCiBKC,E,kDAnBd,WAAYN,GAAO,IAAD,8BACjB,cAAMA,IACDO,MAAQ,CACZC,UAAU,GAHM,E,8DAODC,EAAOC,GACxBC,KAAKC,SAAU,CAAEJ,UAAU,M,+BAI3B,OAAIG,KAAKJ,MAAMC,SACN,6DAEAG,KAAKX,MAAMK,a,GAhBMQ,aC8CZC,G,wDAvCZ,aAAe,IAAD,8BACT,gBAaLC,eAAiB,SAACC,GACZ,EAAKJ,SAAS,CAACK,YAAaD,EAAME,OAAOC,SAb1C,EAAKZ,MAAQ,CACZlB,OAAQ,GACR4B,YAAa,KAJL,E,gEAQO,IAAD,OACnBG,MAAM,8CACFC,MAAK,SAAAC,GAAc,OAAOA,EAASC,UACnCF,MAAK,SAAAG,GAAW,EAAKZ,SAAU,CAACvB,OAAQmC,S,+BAOrC,IAAD,EAC+Bb,KAAKJ,MAA7BlB,EADP,EACOA,OAAQ4B,EADf,EACeA,YACdQ,EAAiBpC,EAAOqC,QAAO,SAAArC,GACpC,OAAOA,EAAON,KAAK4C,cAAcC,SAASX,EAAYU,kBAE1D,OAAQtC,EAAOwC,OAGX,yBAAK5C,UAAU,MACf,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAYU,aAAcgB,KAAKI,iBAC/B,kBAAC,EAAD,KACS,kBAAC,EAAD,KACG,kBAAC,EAAD,CAAY1B,OAAQoC,OAPnC,wBAAIxC,UAAU,MAAd,e,GA1Be4B,cCKEiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAApC,GACLqC,QAAQrC,MAAMA,EAAMsC,a","file":"static/js/main.6fbc5674.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({id, name, email}) => {\r\n\r\n\treturn(\r\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n          <img alt='robot' src={`https://robohash.org/${id}?size=200x200`} />\r\n             <div>\r\n             <h2>{name}</h2>\r\n             <p>{email}</p>\r\n             </div>\r\n        </div>\r\n\t\t);\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardsArray = ({ robots }) => {\r\n\treturn(\r\n\t\t<div>\r\n        {\r\n            robots.map((user, i) => {\r\n\t\t       return ( \r\n\t\t\t             <Card\r\n\t\t\t             key={i}\r\n\t\t\t             id={user.id} \r\n\t\t\t             name={user.name} \r\n\t\t\t             email={user.email}\r\n\t\t\t             />\r\n\t\t\t         );\r\n\t            })\r\n         }\r\n        </div>\r\n\t );\r\n}\r\n\r\nexport default CardsArray;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchChange }) => {\r\n\treturn(\r\n\t\t<div className='pa2'>\r\n        <input\r\n        className='pa3 ba b--green bg-lightest-blue' \r\n        type='search' \r\n        placeholder='Search robots' \r\n        onChange={ searchChange }\r\n        />\r\n        </div>\r\n\t\t);\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n\treturn (\r\n\t\t\t<div style={{ overflowY: 'scroll', border: '2px solid black', height: '700px'}}>\r\n\t\t\t{props.children}\r\n\t\t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n\tconstructor(props){\r\n\t\tsuper(props)\r\n\t\tthis.state = {\r\n\t\t\thasError: false\r\n\t\t}\r\n\t}\r\n\r\ncomponentDidCatch(error, info) {\r\n\tthis.setState( { hasError: true } );\r\n}\r\n\r\nrender() {\r\n\tif (this.state.hasError) {\r\n\t\t\treturn <h1>Oooops, Something went wrong.</h1>\r\n\t\t\t\t}\r\n\t\t\treturn this.props.children;\r\n\t}\r\n}\t\r\n\r\nexport default ErrorBoundry;","import React, { Component } from 'react';\r\nimport CardsArray from '../Components/CardsArray';\r\nimport SearchBox from '../Components/SearchBox';\r\nimport Scroll from '../Components/Scroll';\r\nimport ErrorBoundry from '../Components/ErrorBoundry';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n\r\n   constructor() {\r\n   \t    super();\r\n   \t    this.state = {\r\n   \t    \trobots: [],\r\n   \t    \tsearchField: ' '\r\n   \t    }\r\n   }\r\n\r\n   componentDidMount() {\r\n   \tfetch('https://jsonplaceholder.typicode.com/users')\r\n   \t   .then(response => { return response.json(); } )\r\n   \t   .then(users => { this.setState( {robots: users } ); });\r\n   }\r\n\r\n   onSearchChange = (event) =>  {\r\n   \t     this.setState({searchField: event.target.value});\r\n   }\r\n\r\n\trender() {\r\n         const { robots, searchField } = this.state;\r\n\t\t   const filteredRobots = robots.filter(robots =>{\r\n   \t \treturn robots.name.toLowerCase().includes(searchField.toLowerCase())\r\n   \t }); \r\n\t\treturn !robots.length ?\r\n\t\t\t<h1 className='tc'>Loading</h1> :\r\n   \t\t (\r\n   \t\t\t<div className='tc'>\r\n   \t\t\t<h1 className='f1'>RoboFriends</h1>\r\n   \t\t\t<SearchBox  searchChange={this.onSearchChange}/>\r\n   \t\t\t<Scroll>\r\n               <ErrorBoundry>\r\n   \t              <CardsArray robots={filteredRobots} />\r\n               </ErrorBoundry>\r\n   \t      </Scroll>\r\n   \t        </div>\r\n   \t\t)\r\n     }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}